{"version":3,"sources":["robo.png","components/connect.js","components/Chat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","require","headers","Alice","url","text","message_id","session_id","new_session","handler","error_handler","post","alice_request","crossDomain","params","key","then","response","console","log","catch","error","Chat","props","handleNewUserMessage","newMessage","alice","webhook","new_message","data","addResponseMessage","this","toggleWidget","prevProps","prevState","snapshot","dropMessages","profileAvatar","logo","senderPlaceHolder","title","subtitle","Component","App","onChangeSelect","event","target","value","setState","input_disabled","selectedChat","onChangeInput","state","uuidv4","className","style","padding","Grid","container","spacing","item","xs","Paper","FormControl","component","FormLabel","RadioGroup","aria-label","name","onChange","bind","FormControlLabel","control","Radio","label","TextField","id","disabled","variant","fullWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d4991169.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robo.afd16a27.png\";","const axios = require('axios');\n\nconst headers  = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Methods\" : \"GET,POST,PUT,DELETE,OPTIONS\",\n  \"Access-Control-Allow-Headers\": 'Origin, X-Requested-With, Content-Type, Accept'\n};\n\nconst PROXY_URL = \"https://vitaliyrakitin.ru/proxy\";\n\nexport default class Alice{\n      constructor() {\n      }\n\n    static alice_request(text, message_id, session_id, new_session){\n        return {\n          \"meta\": {\n            \"locale\": \"ru-RU\",\n            \"timezone\": \"Europe/Moscow\",\n            \"client_id\": \"ru.yandex.searchplugin/5.80 (Samsung Galaxy; Android 4.4)\"\n          },\n          \"request\": {\n            \"command\": text,\n            \"original_utterance\": text,\n            \"type\": \"SimpleUtterance\",\n          },\n          \"session\": {\n            \"new\": new_session,\n            \"message_id\": message_id,\n            \"session_id\": session_id,\n            \"user_id\": session_id,\n            \"skill_id\": \"123\"\n          },\n          \"version\": \"1.0\"\n        }\n    }\n\n    new_message(url, text, message_id, session_id, new_session, handler, error_handler) {\n        axios.post(\n            PROXY_URL,\n            Alice.alice_request(text, message_id, session_id, new_session),\n            {\n                crossDomain: true,\n                headers: headers,\n                params: {\n                    url: url,\n                    key: \"123\"\n                }\n            }\n        )\n        .then(function (response) {\n            console.log(response);\n            handler(response)\n        })\n        .catch(function (error) {\n            console.log(error);\n            error_handler(error);\n        });\n    }\n}","import React, {Component} from \"react\";\nimport {Widget, addResponseMessage, toggleWidget,dropMessages} from \"react-chat-widget\";\nimport logo from \"../robo.png\";\nimport Alice from \"./connect\";\n\nclass Chat extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    handleNewUserMessage = (newMessage) => {\n        console.log(`New message incoming! ${newMessage}`);\n        // Now send the message throught the backend API\n        let alice = new Alice();\n        if (this.props.webhook) {\n          alice.new_message(\n              this.props.webhook,\n              newMessage,\n              1,\n              this.props.session_id,\n              false,\n              (response) => {\n                  if (response?.data?.response?.text){\n                     addResponseMessage(response.data.response.text)\n                  }\n                  else{\n                      addResponseMessage(\"Ой. С сервера пришёл пустой ответ :(\");\n                  }\n              },\n              (error) => {\n                  addResponseMessage(\"Кажется, на сервере произошла ошибка. \" +  error + \" :(\");\n              }\n          );\n        }\n        else{\n          addResponseMessage(\"Ни один чат не выбран.\")\n        }\n    };\n\n    componentDidMount() {\n        if (this.props.webhook)\n            addResponseMessage(\"Добро пожаловать в чат!\");\n        else\n            addResponseMessage(\"Вы не выбрали webhook!\");\n        toggleWidget();\n\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.webhook){\n            dropMessages();\n            addResponseMessage(\"Добро пожаловать в чат!\");\n        }\n    };\n\n    render() {\n        return (\n            <Widget\n              handleNewUserMessage={this.handleNewUserMessage}\n              profileAvatar={logo}\n              senderPlaceHolder=\"Введите текст\"\n              title=\"Чат бот\"\n              subtitle=\"тестируем навыки\"\n            />\n        );\n  }\n}\n\nexport default Chat;","import React, { Component } from 'react';\nimport 'react-chat-widget/lib/styles.css';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { v4 as uuidv4 } from 'uuid';\nimport Chat from \"./components/Chat\";\n\nconst AVIA_URL = \"https://zenbot-dev.just-ai.com/chatadapter/chatapi/webhook/yandex/puUqUBqh:072bbd0ef039296f36f2c4fd838699ec9c676140\";\nconst COOKER_URL = \"https://zenbot-dev.just-ai.com/chatadapter/chatapi/webhook/yandex/zmpptEVS:3b8a17a3980cb005d1f675b417d69e9ceec8893e\";\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedChat: null,\n      webhook: null,\n      session_id: uuidv4(),\n      input_disabled: true\n    };\n  }\n\n\n  onChangeSelect = (event)=>{\n    console.log(`Select: ${event.target.value}`);\n    if (event.target.value === \"other\") {\n      this.setState({input_disabled: false, selectedChat: event.target.value, webhook: \"\"});\n    }\n    else {\n      this.setState({input_disabled: true, selectedChat: event.target.value, webhook: event.target.value});\n    }\n  };\n\n  onChangeInput = (value)=>{\n    console.log(`onChangeInput: ${value.target.value}`);\n      this.setState({webhook: value.target.value});\n  };\n\n  render() {\n\n    return (\n      <div className={App} style={{ padding: 10 }}>\n        <Grid container spacing={2}>\n          <Grid item />\n          <Grid item xs={12}>\n              <Paper>\n                <div style={{ padding: 10 }}>\n                    <FormControl component=\"fieldset\">\n                      <FormLabel component=\"legend\">Выберите навык</FormLabel>\n                      <RadioGroup aria-label=\"gender\" name=\"gender1\" value={this.state.selectedChat} onChange={this.onChangeSelect.bind()}>\n                        <FormControlLabel value={AVIA_URL} control={<Radio />} label=\"Заказ авиабилетов\" />\n                        <FormControlLabel value={COOKER_URL} control={<Radio />} label=\"Помощник в приготовлении еды\" />\n                        <FormControlLabel value=\"other\" control={<Radio />} label=\"Свой webhook\" />\n                      </RadioGroup>\n                    </FormControl>\n                </div>\n            </Paper>\n          </Grid>\n          <Grid item xs={12}>\n              <TextField id=\"outlined-basic\"\n                         disabled={this.state.input_disabled}\n                         label={this.state.webhook ? \"\" : \"Webhook\"}\n                         variant=\"outlined\"\n                         onChange={this.onChangeInput.bind()}\n                         fullWidth\n                         value={this.state.webhook}\n              />\n          </Grid>\n          <Grid item xs={12}>\n            <Chat\n              webhook={this.state.webhook}\n              session_id={this.state.session_id}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}